# Unique name for this workflow
name: Deploy master branch to production org

# Definition when the workflow should run
on:
    push:
      branches: [ master ]
      paths:
        - 'force-app/**'
            

# Jobs to be executed
jobs:
    deploy-branch-to-production-org:
        runs-on: ubuntu-latest
        if: contains(${{ github.event.head_commit.message }},'[Deploy]')
        steps:
           # Now we install nodejs 
           in the VM, and specify version 14
            - uses: actions/setup-node@v2
              with:
                node-version: '14'

             # Checkout the source code
            - name: 'Checkout source code'
              uses: actions/checkout@v2
              with:
                fetch-depth: 0
          
            # Read Apex::[]::Apex To Get Class Names
            - name: 'Read Latest Commit Message'
              env:
                PR_BODY: ${{github.event.head_commit.message}}
              run: |
                  echo $PR_BODY
                  echo $PR_BODY > ./pr_body.txt
                  node ./parsePR.js              
                  TESTS=$(cat testsToRun.txt) 
                  echo "APEX_TESTS=$TESTS" >> $GITHUB_ENV
              
            # Install Salesforce CLI
            - name: 'Install Salesforce CLI'
              run: |
                  wget https://developer.salesforce.com/media/salesforce-cli/sfdx/channels/stable/sfdx-linux-x64.tar.xz
                  mkdir ~/sfdx
                  tar xJf sfdx-linux-x64.tar.xz -C ~/sfdx --strip-components 1
                  echo "$HOME/sfdx/bin" >> $GITHUB_PATH
                  ~/sfdx/bin/sfdx version

            # install SFDX-Git-Delta plugin - https://github.com/scolladon/sfdx-git-delta
            - name: 'Installing sfdx git delta'
              run: | 
                  echo y | sfdx plugins:install sfdx-git-delta
                  sfdx plugins 

           
            # Store secret for production org
            - name: 'Populate auth file with SFDX_URL secret of the integration and staging orgs'
              shell: bash
              run: |
                  echo ${{ secrets.SFDX_PRODUCTION_URL}} > ./SFDX_PRODUCTION_URL.txt

            - name: 'Create delta packages for new, modified or deleted metadata'
              run: | 
                  mkdir changed-sources
                  sfdx sgd:source:delta --to "HEAD" --from "HEAD^" --output changed-sources/ --generate-delta --source force-app/

            # Authenticate to org
            - name: 'Authenticate to Production Org'
              run: sfdx auth:sfdxurl:store -f ./SFDX_PRODUCTION_URL.txt -s -a production

            # If the env variable equals all, we run all tests
            - name: 'Deploy the entire branch to Production org - run all tests'
              if: ${{ env.APEX_TESTS == 'all' }}
              run: |
                  sfdx force:source:deploy -p "changed-sources/force-app"  --testlevel RunLocalTests  --json

            # - name: 'Deploy destructive changes (if any) to Production org'
            #   run: sfdx force:mdapi:deploy -d "changed-sources/destructiveChanges" --checkonly --ignorewarnings 

            - name: 'Deploy the entire branch to Production org - run specified tests'
              if: ${{ env.APEX_TESTS != 'all' }}
              run: |
                  echo ${{env.APEX_TESTS}}
                  sfdx force:source:deploy -p "changed-sources/force-app" --testlevel RunSpecifiedTests --runtests ${{env.APEX_TESTS}} --json


           
           

           